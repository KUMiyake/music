\documentclass{jsarticle}
\usepackage[dvipdfmx]{graphicx}
\usepackage{listings,jlisting}

\lstset{%
  language={C},
  basicstyle={\small},%
  identifierstyle={\small},%
  commentstyle={\small\itshape},%
  keywordstyle={\small\bfseries},%
  ndkeywordstyle={\small},%
  stringstyle={\small\ttfamily},
  frame={tb},
  breaklines=true,
  columns=[l]{fullflexible},%
  numbers=left,%
  xrightmargin=0zw,%
  xleftmargin=3zw,%
  numberstyle={\scriptsize},%
  stepnumber=1,
  numbersep=1zw,%
  lineskip=-0.5ex%
}

\title{音声情報処理　課題2}
\author{三宅　怜衣}
\date{2017/01/19}

\begin{document}
\maketitle

\section{実装内容}
音楽ファイルを再生しながら、マイク入力をモニターする。実装した機能は以下の通り
\begin{enumerate}
  \item 音楽プレイヤーとレコーダーの同時実行
  \item プレイヤーのスぺクトログラム表示
  \item レコーダーのピッチ表示
  \item レコーダーのスぺクトログラム表示
  \item レコーダーのノート名を表示
  \item 歌詞を表示
\end{enumerate}

\section{ソースコード}
ソースコードは複数のクラスに分かれている。
実際に起動されるのはKaraokeであり、他のクラスは
音響信号の分析処理や、再生機能などを提供する

\subsection{Karaoke.java}
GUIを提供
\begin{lstlisting}[caption=SoundGUI.java,label=SoundGUI]
/**
 * Created by a-rusi on 2017/01/05.
 */
import jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils;
import jp.ac.kyoto_u.kuis.le4music.Player;
import jp.ac.kyoto_u.kuis.le4music.Recorder;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.awt.event.*;
import java.io.IOException;

public final class Karaoke extends JFrame implements ActionListener{

    JLabel fileNameLabel;
    JPanel globalPanel;
    JPanel buttonPanel;
    JPanel consolePanel;
    JPanel spectrumPanel;
    JPanel monitorPanel;
    JButton fileButton;
    JButton playButton;
    JButton stopButton;
    JLabel playCountLabel;
    Player player;
    JLabel lyricsLabel;
    JLabel noteLabel;
    Recorder recorder;
    File currentFile;

    public static void main(final String[] args){
        Karaoke  karaoke = new  Karaoke();


        karaoke.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        karaoke.setBounds(10, 10, 300, 200);
        karaoke.setExtendedState(JFrame.MAXIMIZED_BOTH);
        karaoke.setTitle("カラオケシステム");
        karaoke.setVisible(true);
    }

    Karaoke(){
        fileButton = new JButton("file select");
        playButton = new JButton("Play");
        stopButton = new JButton("Stop");
        playCountLabel = new JLabel();
        fileButton.addActionListener(this);
        playButton.addActionListener(this);
        stopButton.addActionListener(this);

        globalPanel = new JPanel();
        monitorPanel = new JPanel();
        spectrumPanel = new JPanel();
        globalPanel.setLayout(new BoxLayout(globalPanel, BoxLayout.PAGE_AXIS));
        monitorPanel.setLayout(new GridLayout(2,2));
        buttonPanel = new JPanel();
        buttonPanel.add(fileButton);
//        buttonPanel.add(playButton);
//        playButton.setBounds(0,0,120,40);

        fileNameLabel = new JLabel();
        fileNameLabel.setText("ファイルを選択してください");

        JPanel fileNamePanel = new JPanel();
        fileNamePanel.add(fileNameLabel);

        JPanel filePanel = new JPanel();
        filePanel.setLayout(new FlowLayout(FlowLayout.LEFT));

        filePanel.add(buttonPanel);
        filePanel.add(fileNamePanel);

        globalPanel.add(filePanel);
        globalPanel.add(monitorPanel);
        getContentPane().add(globalPanel, BorderLayout.CENTER);
    }
    public void actionPerformed(ActionEvent event)
            {
        if(event.getSource() == fileButton) {
            JFileChooser fileChooser = new JFileChooser();

            int selected = fileChooser.showOpenDialog(this);
            if (selected == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooser.getSelectedFile();
                fileNameLabel.setText(currentFile.getName());

                monitorPanel.removeAll();
                JLabel loading_label = new JLabel();
                loading_label.setText("読み込み中");
                monitorPanel.add(loading_label);
                monitorPanel.add(loading_label);
                monitorPanel.add(loading_label);
                monitorPanel.add(loading_label);

                try {
                    player = Player.newPlayer(currentFile);
                    Mixer.Info[] mixerInfo=AudioSystem.getMixerInfo();
                    recorder = Recorder.newRecorder(16000.0 ,0.4,mixerInfo[3],new File("out_w.wav"));

                    lyricsLabel = PlotScore.generateLyricsLabel(player);
                    noteLabel = PlotPitch.generatePitchMonitorLabel();
                    playCountLabel = PlotScore.generatePositionLabel();
                }
                catch(IOException | UnsupportedAudioFileException | javax.sound.sampled.LineUnavailableException e){

                }
                LoadSoundData(currentFile);

            } else if (selected == JFileChooser.CANCEL_OPTION) {
                fileNameLabel.setText("キャンセルされました");
            } else if (selected == JFileChooser.ERROR_OPTION) {
                fileNameLabel.setText("エラーまたは取り消しがありました");
            }
        }
        else if(event.getSource() == playButton){
//            if(!player.isRunning())
//            player.stop();

            consolePanel.removeAll();
            consolePanel.add(stopButton);
//            consolePanel.add(spectrumPanel);
//            今後の拡張で実装予定の動的表示部分
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    while(true){
                        playCountLabel.setText(String.valueOf(player.position()));
                        try {
                            JFreeChart spectrumChart = PlotSpectrum.GenerateSpectrumChart(player.latestFrame(),player.getSampleRate());
                            spectrumPanel.removeAll();
                            spectrumPanel.add(new ChartPanel(spectrumChart));
                            Thread.sleep(40);
                        }
                        catch(InterruptedException e){

                        }
                    }
                }
            });
//            thread.start();
        }
        else if(event.getSource() == stopButton){
            player.stop();
        }
    }
    void LoadSoundData(File wavFile)
    {
		/* 音響信号読み込み */
        try {
            final AudioInputStream stream = AudioSystem
                    .getAudioInputStream(wavFile);
            final double[] waveform = Le4MusicUtils.readWaveformMonaural(stream);
            final AudioFormat format = stream.getFormat();
            final double sampleRate = format.getSampleRate();
            stream.close();

            JFreeChart spectrogramChart =
                    MonitorSpectrogram.GenerateSpectrogramMonitorChart(player);
//                    PlotWaveform.GenerateWaveformChart(waveform, sampleRate);
            JFreeChart pitchChart =
                    PlotPitch.generatePitchRecorderMonitor(recorder);
//                    MonitorSpectrogram.GenerateSpectrogramMonitorChart(player);

//                    PlotSpectrogram.GenerateSpectrogramChart(
//                    waveform, sampleRate, Le4MusicUtils.frameDuration, Le4MusicUtils.shiftDuration);
//
            JFreeChart volumeChart =
                    MonitorRecorder.GenerateSpectrogramMonitorChart(recorder);
//                    PlotVolume.GenerateLoudnessChart(waveform, sampleRate);
            monitorPanel.removeAll();

            consolePanel = new JPanel();
            noteLabel.setLayout(new FlowLayout(FlowLayout.RIGHT));
            lyricsLabel.setLayout(new FlowLayout(FlowLayout.CENTER));
            consolePanel.setLayout(new BorderLayout());
            consolePanel.add(noteLabel,BorderLayout.CENTER);
            consolePanel.add(lyricsLabel,BorderLayout.PAGE_END);
            consolePanel.add(playCountLabel,BorderLayout.PAGE_START);

            monitorPanel.add(consolePanel);
            monitorPanel.add(new ChartPanel(spectrogramChart));
            monitorPanel.add(new ChartPanel(volumeChart));
            monitorPanel.add(new ChartPanel(pitchChart));


            player.start();
            recorder.start();
            invalidate();
            validate();
        }
        catch(IOException | UnsupportedAudioFileException e){

        }
    }
}
\end{lstlisting}


\subsection{MonitorSpectrogram.java}
レコーダーのスぺクトログラムを提供
\begin{lstlisting}[caption=MonitorSpectrogram.java,label=MonitorSpectrogram]
import java.io.File;
import java.util.Arrays;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

import javax.sound.sampled.Mixer;

import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.util.MathArrays;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.general.DatasetChangeEvent;

import jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils;
import jp.ac.kyoto_u.kuis.le4music.Player;
import jp.ac.kyoto_u.kuis.le4music.ColorMapIntARGB;

import java.io.IOException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.*;

import org.apache.commons.cli.ParseException;

public final class MonitorSpectrogram {

    public static final class Default {
        public static final double duration = 5.0;   /* seconds */
        public static final double freqMax = 4000.0; /* Hz */
        public static final double specLogMin = -100.0;
        public static final double specLogMax = 0.0;
    }

    private static final class OnlineSpectrogramPlot extends XYPlot {

        private static final long serialVersionUID = 3023546826798901921L;

        private final DatasetChangeEvent event = new DatasetChangeEvent(this, null);

        private final int frames;
        private final int bins;
        private final ColorMapIntARGB colormap;

        private final BufferedImage image;
        private final int[] dataElements;

        private OnlineSpectrogramPlot(
                final NumberAxis timeAxis,
                final NumberAxis freqAxis,
                final int frames,
                final int bins,
                final ColorMapIntARGB colormap
        ) {
            super(
        /* dataset    = */ null,
        /* domainAxis = */ timeAxis,
        /* rangeAxis  = */ freqAxis,
        /* renderer   = */ null
            );
            this.frames = frames;
            this.bins = bins;
            this.colormap = colormap;
            this.image = new BufferedImage(
        /* width      = */ frames,
        /* height     = */ bins,
        /* imageType  = */ BufferedImage.TYPE_INT_ARGB
            );
            this.dataElements = new int[frames * bins];

            setDataset(new DefaultXYDataset()); /* render() ã‚’å‘¼ã³å‡ºã•ã›ã‚‹ãŸã‚ã®ãƒ€ãƒŸãƒ¼ */
        }

        public final void addSpectrum(final Complex[] spectrum) {
            final int[] specImg = Arrays.stream(spectrum)
                    .limit(bins)
                    .mapToDouble(Complex::abs)
                    .map(x -> 20.0 * Math.log10(x))
                    .mapToInt(colormap::map)
                    .toArray();
            for (int i = 0; i < bins; i++) {
                System.arraycopy(dataElements, (i * frames) + 1,
                        dataElements, (i * frames) + 0,
                        frames - 1);
                dataElements[(i * frames) + frames - 1] = specImg[bins - 1 - i];
            }
            datasetChanged(event); /* render() ã‚’å‘¼ã³å‡ºã™ */
        }

        @Override /* XYPlot */
        public final boolean render(
                final Graphics2D g2,
                final Rectangle2D dataArea,
                final int index,
                final org.jfree.chart.plot.PlotRenderingInfo info,
                final org.jfree.chart.plot.CrosshairState crosshairState
        ) {
            image.getRaster().setDataElements(
        /* x = */ 0,
        /* y = */ 0,
        /* w = */ frames,
        /* h = */ bins,
        /* inData = */ dataElements
            );
            return g2.drawImage(
        /* img   = */ image,
        /* xform = */ new AffineTransform(
          /* m00 = */ dataArea.getWidth() / frames,
          /* m10 = */ 0.0,
          /* m01 = */ 0.0,
          /* m11 = */ dataArea.getHeight() / bins,
          /* m02 = */ dataArea.getX(),
          /* m12 = */ dataArea.getY()
                    ),
        /* obs   = */ null
            );
        }

    }

    public static JFreeChart GenerateSpectrogramMonitorChart(Player player)
            throws IOException,
            UnsupportedAudioFileException
             {

        final double frameDuration = Le4MusicUtils.frameDuration;
    /* シフト長＝フレーム長の8分の1 */
        final double shiftDuration = frameDuration / 8.0;
        final double duration = Default.duration;
        final double freqMax = Default.freqMax * 2;

        final int frames = (int)(duration / shiftDuration);

        final int fftSize = 1 << Le4MusicUtils.nextPow2(player.getFrameSize());
        final int bins = (int)(fftSize * freqMax / player.getSampleRate());
        final double[] window =
                MathArrays.normalizeArray(Le4MusicUtils.hanning(player.getFrameSize()), 1.0);

        final NumberAxis timeAxis = new NumberAxis("Time-index");
        timeAxis.setLowerMargin(0.0);
        timeAxis.setUpperMargin(0.0);

        final NumberAxis freqAxis = new NumberAxis("Frequency-index");
        freqAxis.setLowerMargin(0.0);
        freqAxis.setUpperMargin(0.0);

        final NumberAxis timeAxis1 = new NumberAxis("Time [sec.]");
        timeAxis1.setLowerBound((-frames + 1) * shiftDuration);
        timeAxis1.setUpperBound(0.0);

        final NumberAxis freqAxis1 = new NumberAxis("Frequency [Hz]");
        freqAxis1.setLowerBound(0.0);
        freqAxis1.setUpperBound(freqMax);

        final NumberAxis freqAxis2 = new NumberAxis("Frequency [Hz]");
        freqAxis2.setLowerBound(0.0);
        freqAxis2.setUpperBound(freqMax);

        final ColorMapIntARGB colormap =
                Le4MusicUtils.hotColorMap(Default.specLogMin, Default.specLogMax);
        final OnlineSpectrogramPlot spgPlot =
                new OnlineSpectrogramPlot(timeAxis, freqAxis, frames, bins, colormap);
        final String axisType = "NORMAL"; /* NORMAL | INDEX | BOTH */
        switch (axisType) {
            case "INDEX":
                break;
            case "BOTH":
                spgPlot.setDomainAxis(1, timeAxis1);
                spgPlot.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
                spgPlot.setRangeAxis(1, freqAxis1);
                spgPlot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
                break;
            case "NORMAL":
                spgPlot.setDomainAxis(1, timeAxis1);
                spgPlot.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
                spgPlot.setRangeAxis(1, freqAxis1);
                spgPlot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
                spgPlot.getDomainAxis().setVisible(false);
                spgPlot.getRangeAxis().setVisible(false);
                break;
        }

        final JFreeChart spgChart = new JFreeChart(spgPlot);
        spgChart.removeLegend();


        final ScheduledExecutorService executor =
                Executors.newSingleThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(
                () -> {
                    final double[] frame = player.latestFrame();
                    final double[] wframe = MathArrays.ebeMultiply(frame, window);
                    final Complex[] spectrum = Le4MusicUtils.rfft(Arrays.copyOf(wframe, fftSize));
                    spgPlot.addSpectrum(spectrum);

        /* Playerの再生停止に合わせて描画も停止 */
                    if (!player.isOpen()) executor.shutdown();
                },
      /* initialDelay = */ 0L,
      /* period       = */ (long)(shiftDuration * 1000000),
                TimeUnit.MICROSECONDS
        );
        SwingUtilities.invokeLater(player::start);
        return spgChart;
    }

    public final void run(final String[] args)
            throws IOException,
            ParseException,
            UnsupportedAudioFileException,
            LineUnavailableException {


    /* ウィンドウ描画がひと通り完了してから再生を開始する */
//        SwingUtilities.invokeLater(player::start);
    }

    public static final void main(final String[] args)
            throws IOException,
            ParseException,
            UnsupportedAudioFileException,
            LineUnavailableException {
        new MonitorSpectrogram().run(args);
    }

}
\end{lstlisting}

\subsection{PlotPitch.java}
音高抽出機能を提供
\begin{lstlisting}[caption=PlotPitch.java,label=PlotPitch]
import jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils;
import jp.ac.kyoto_u.kuis.le4music.Plot;
import jp.ac.kyoto_u.kuis.le4music.Recorder;
import jp.ac.kyoto_u.kuis.le4music.SingleXYArrayDataset;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;

import static java.lang.Math.abs;
import static jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils.sampleRate;

/**
 * Created by a-rusi on 2017/01/12.
 */
public class PlotPitch {
    static double pitchValue;
    static boolean isPlotPitch= false;
    static public double getPitch(final double[] frame) {

        /* fftSize = 2ˆp >= waveform.lengthを満たすfftSizeを求める * 2ˆpはシフト演算で求められる*/
        final int fftSize = 1 << Le4MusicUtils.nextPow2(frame.length);
        /* 信号の長さをfftSizeに伸ばし，長さが足りない部分は0で埋める．  *振幅を信号長で正規化する． */
        final double[] src = Arrays.stream(Arrays.copyOf(frame, fftSize)).map(w -> w / frame.length)
                .toArray();
        final Complex[] ffted_array = Le4MusicUtils.rfft(src);
        Complex[] powed = ComplexUtils.convertToComplex(Arrays.stream(ffted_array).mapToDouble(i -> i.abs() * i.abs()).toArray());
        double[] irffted_array = Le4MusicUtils.irfft(powed);

        int peak_max = 0;
        boolean initialized = false;

        double[] data = irffted_array;

        ArrayList<Double> peakVals = new ArrayList<Double>();
        ArrayList<Integer> peakIndex= new ArrayList<Integer>();
        for(int i = 2;i < (data.length / 2);i++){
            if(data[i - 1] - data[i - 2] >= 0 && data[i] - data[i-1] < 0){
                peakVals.add(data[i - 1]);
                peakIndex.add(i);
            }
        }
        if(peakIndex.size() == 0){
            return 0;
        }
        else {
            return Le4MusicUtils.sampleRate / (peakIndex.get(peakVals.indexOf(Collections.max(peakVals)))-1);
        }

//
//        for(int i = 1;i < irffted_array.length - 1 ; i++){
//            if(irffted_array[i - 1] < irffted_array[i] &&
//                    irffted_array[i] > irffted_array[i + 1]) {
//                if(!initialized){
//                    initialized = true;
//                }
//                else if(peak_max == 0){
//                     peak_max = i;
//                }
//                else if(irffted_array[peak_max] < irffted_array[i])
//                    peak_max = i;
//            }
//        }
//        if(peak_max == 0)
//            return 0;
//        return Le4MusicUtils.sampleRate / peak_max;
    }
    static public String getNote(double pitch){
        double noteValue[] = {4186.0,
                3951.1, 3729.3, 3520.0, 3322.4, 3136.0, 2960.0, 2793.8, 2637.0, 2489.0, 2349.3, 2217.5, 2093.0,
                1975.5, 1864.7, 1760.0, 1661.2, 1568.0, 1480.0, 1396.9, 1318.5, 1244.5, 1174.7, 1108.7, 1046.5,
                987.77, 932.33, 880.00, 830.61, 783.99, 739.99, 698.46, 659.26, 622.25, 587.33, 554.37, 523.25,
                493.88, 466.16, 440.00, 415.30, 392.00, 369.99, 349.23, 329.63, 311.13, 293.66, 277.18, 261.63,
                246.94, 233.08, 220.00, 207.65, 196.00, 185.00, 174.61, 164.81, 155.56, 146.83, 138.59, 130.81,
                123.47, 116.54, 110.00, 103.83, 97.999, 92.499, 87.307, 82.407, 77.782, 73.416, 69.296, 65.406,
                61.735, 58.270, 55.000, 51.913, 48.999, 46.249, 43.654, 41.203, 38.891, 36.708, 34.648, 32.703,
                30.868, 29.135, 27.500
        };
        String note_name[] = {"B","A#","A","G#","G","F#","F","E","D#","D","C#","C"};
        if(pitch > noteValue[0]) return "C8";
        for(int i = 1,oct = 7,counter = 0;i < noteValue.length;i++){
            if(noteValue[i] < pitch){
                return note_name[counter] + Integer.toString(oct);
            }
            counter++;
            if(counter == 12) {
                oct--;
                counter = 0;
            }
        }
        return "none";
    }
    static public JLabel generatePitchMonitorLabel(){
        JLabel noteMonitorLabel = new JLabel();
        noteMonitorLabel.setFont(new Font("ＭＳ ゴシック", Font.BOLD ,64));
        final ScheduledExecutorService executor =
                Le4MusicUtils.newSingleDaemonThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(
                () -> {
                    if(isPlotPitch)
                        noteMonitorLabel.setText(getNote(pitchValue));
                },
        /* initialDelay = */ 0L,
        /* delay = */ 1L,
                TimeUnit.MILLISECONDS
        );
        return noteMonitorLabel;
    }
    static public JFreeChart generatePitchRecorderMonitor(Recorder recorder){
        final JFreeChart wfChart = ChartFactory.createXYLineChart(
      /* title      = */ "Pitch",
      /* xAxisLabel = */ "Time (sec)",
      /* yAxisLabel = */ "Amplitude",
      /* dataset    = */ null
        );
        wfChart.removeLegend();
        final XYPlot wfPlot = wfChart.getXYPlot();
        wfPlot.getDomainAxis().setRange(-recorder.getFrameDuration(), 0.0);
        wfPlot.getRangeAxis().setRange(0, 1200.0);

    /* 時間軸 */
        final double[] times =
                IntStream.rangeClosed(- recorder.getFrameSize() + 1, 0)
                        .mapToDouble(i -> i / recorder.getSampleRate())
                        .toArray();
        final double [] stock= IntStream.rangeClosed(- recorder.getFrameSize() + 1, 0)
                .mapToDouble(i -> 0)
                .toArray();

        final ScheduledExecutorService executor =
                Le4MusicUtils.newSingleDaemonThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(
                () -> {
                    if (!recorder.isUpdated()) return;
        /* 最新フレームの波形を描画 */
                    int speed = 32;
                    for(int i = 0;i < stock.length - speed;i++){
                        stock[i] =stock[i + speed];
                    }
                    pitchValue = getPitch((recorder.latestFrame()));
                    isPlotPitch = PlotVolume.getVolumeValue(recorder.latestFrame()) > -120;
                    for(int i = 0;i < speed;i++)
                        stock[stock.length - speed + i] = pitchValue;

                    final XYDataset wfDataset = new SingleXYArrayDataset(times, stock);
                    wfPlot.setDataset(wfDataset);
                },
        /* initialDelay = */ 0L,
        /* delay = */ 1L,
                TimeUnit.MILLISECONDS
        );
        SwingUtilities.invokeLater(recorder::start);
        return wfChart;
    }
    static public void main(final String[] args)
        throws IOException ,
            UnsupportedAudioFileException ,
            javax.sound.sampled.LineUnavailableException{
        Mixer.Info[] mixerInfo= AudioSystem.getMixerInfo();
        Recorder recorder = Recorder.newRecorder(16000.0 ,0.4,mixerInfo[3],new File("out_w.wav"));
        Plot.createJFrame(generatePitchRecorderMonitor(recorder));
        recorder.start();
    }
}
\end{lstlisting}

\subsection{PlotScore.java}
歌詞機能を提供
\begin{lstlisting}[caption=PlotScore.java,label=PlotScore]
import jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils;
import jp.ac.kyoto_u.kuis.le4music.Player;

import javax.swing.*;
import java.awt.Font;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class PlotScore {
    static int position = 0;
    private static class ScorePack{
        public int startTime;
        public String showWords;
        public void init(int time, String words){
            startTime = time;
            showWords = words;
        }
        public ScorePack(){
            startTime = -1;
        }
    }
    static public JLabel generatePositionLabel(){
        JLabel postion_label = new JLabel();
        final ScheduledExecutorService executor =
                Le4MusicUtils.newSingleDaemonThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(
                () -> {
                    postion_label.setText(Integer.toString(position));
                },
        /* initialDelay = */ 0L,
        /* delay = */ 1L,
                TimeUnit.MILLISECONDS
        );
        return postion_label;
    }
    static public JLabel generateLyricsLabel(Player player){
        ScorePack[] pack = new ScorePack[32];
        for(int i = 0;i < pack.length;i++){
            pack[i] = new ScorePack();
        }
        pack[0].init(0,"あああああ");
        pack[1].init(20000,"いいいいい");
        pack[1].init(40000,"う");
        pack[1].init(80000,"おおおお");
        pack[1].init(160000,"かかか");
        JLabel lyrics_label = new JLabel();
        final ScheduledExecutorService executor =
                Le4MusicUtils.newSingleDaemonThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(
                () -> {
                    if (!player.isUpdated()) return;
                    int target_pack = 0;
                    for(int i = 0;i < pack.length;i++){
                        if(player.position() > pack[i].startTime)
                            if(pack[target_pack].startTime < pack[i].startTime)
                                target_pack = i;
                    }
                    position = player.position();
                    lyrics_label.setText(pack[target_pack].showWords);
                },
        /* initialDelay = */ 0L,
        /* delay = */ 1L,
                TimeUnit.MILLISECONDS
        );
        lyrics_label.setFont(new Font("游明朝", Font.BOLD ,24));
        return lyrics_label;
    }
    static public void main(){

    }
}
\end{lstlisting}

\section{使い方}
\subsection{ファイルを開く}
左上の「file select」をクリックして、開きたいファイルを選択する。
ファイルは自動的に再生される。
\subsection{各ウィンドウの説明}
\subsubsection{左上 コンソール}
歌詞およびノート名を表示する
\subsubsection{左下 レコーダースぺクトログラム}
レコーダーの入力をスぺクトログラム表示する
\subsubsection{右上 プレイヤースぺクトログラム}
音楽プレイヤーの出力をスぺクトログラム表示する
\subsubsection{右下 レコーダーピッチ}
レコーダーのピッチを表示します

\begin{center}
\includegraphics[width=18cm]{window.jpg}
\end{center}



\end{document}